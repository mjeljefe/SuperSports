{"ast":null,"code":"var _jsxFileName = \"/Users/musubimanagement/Desktop/marcus jester/SuperSports/frontend/src/containers/Home.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loading from '../assets/img/loading.gif';\nimport postImage from '../assets/img/newspaper-icon-png.jpg';\nimport PostForm from '../components/Posts/PostForm';\nimport Post from '../components/Posts/Post';\nimport { fetchPosts } from '../reducks/posts/operations';\nimport { getPosts } from '../reducks/posts/selectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const selector = useSelector(state => state);\n  const posts = getPosts(selector);\n  let [page, setPage] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    dispatch(fetchPosts({\n      page\n    })); // eslint-disable-next-line\n  }, []); // Infinite Scroll Pagination Flow\n\n  const observer = useRef(); // Reference to a very last post element\n\n  const lastPostElement = useCallback(node => {\n    if (isLoading) return; // Disconnect reference from previous element, so that new last element is hook up correctly\n\n    if (observer.current) {\n      observer.current.disconnect();\n    } // Observe changes in the intersection of target element\n\n\n    observer.current = new IntersectionObserver(async entries => {\n      // That means that we are on the page somewhere, In our case last element of the page\n      if (entries[0].isIntersecting && posts.next) {\n        // Proceed fetch new page\n        setIsLoading(true);\n        setPage(++page);\n        await dispatch(fetchPosts({\n          page\n        }));\n        setIsLoading(false);\n      }\n    }); // Reconnect back with the new last post element\n\n    if (node) {\n      observer.current.observe(node);\n    }\n  }, // eslint-disable-next-line\n  [posts.next]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"posts\",\n      children: [posts.results.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: posts.results.map((post, index) => {\n          return /*#__PURE__*/_jsxDEV(Post, {\n            ref: index === posts.results.length - 1 ? lastPostElement : null,\n            post: post\n          }, post.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-post\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          width: \"72\",\n          src: postImage,\n          alt: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No posts here yet...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Loading,\n          className: \"\",\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"tf63ety61+BXkOMtutks0bOWBUA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/musubimanagement/Desktop/marcus jester/SuperSports/frontend/src/containers/Home.jsx"],"names":["React","useCallback","useEffect","useRef","useState","useDispatch","useSelector","Loading","postImage","PostForm","Post","fetchPosts","getPosts","Home","dispatch","selector","state","posts","page","setPage","isLoading","setIsLoading","observer","lastPostElement","node","current","disconnect","IntersectionObserver","entries","isIntersecting","next","observe","results","length","map","post","index","id"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loading from '../assets/img/loading.gif';\nimport postImage from '../assets/img/newspaper-icon-png.jpg';\nimport PostForm from '../components/Posts/PostForm';\nimport Post from '../components/Posts/Post';\nimport { fetchPosts } from '../reducks/posts/operations';\nimport { getPosts } from '../reducks/posts/selectors';\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    const selector = useSelector(state => state);\n    const posts = getPosts(selector);\n    let [page, setPage] = useState(1);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        dispatch(fetchPosts({ page }));\n        // eslint-disable-next-line\n    }, []);\n\n    // Infinite Scroll Pagination Flow\n    const observer = useRef();\n\n    // Reference to a very last post element\n    const lastPostElement = useCallback(\n        node => {\n            if (isLoading) return;\n            // Disconnect reference from previous element, so that new last element is hook up correctly\n            if (observer.current) {\n                observer.current.disconnect();\n            }\n\n            // Observe changes in the intersection of target element\n            observer.current = new IntersectionObserver(async entries => {\n                // That means that we are on the page somewhere, In our case last element of the page\n                if (entries[0].isIntersecting && posts.next) {\n                    // Proceed fetch new page\n                    setIsLoading(true);\n                    setPage(++page);\n                    await dispatch(fetchPosts({ page }));\n                    setIsLoading(false);\n                }\n            });\n\n            // Reconnect back with the new last post element\n            if (node) {\n                observer.current.observe(node);\n            }\n        },\n        // eslint-disable-next-line\n        [posts.next]\n    );\n\n    return (\n        <section className=\"content\">\n            <PostForm />\n            <section className=\"posts\">\n                {posts.results.length > 0 ? (\n                    <ul>\n                        {posts.results.map((post, index) => {\n                            return (\n                                <Post\n                                    ref={index === posts.results.length - 1 ? lastPostElement : null}\n                                    key={post.id}\n                                    post={post}\n                                />\n                            );\n                        })}\n                    </ul>\n                ) : (\n                    <div className=\"no-post\">\n                        <img width=\"72\" src={postImage} alt=\"icon\" />\n                        <p>No posts here yet...</p>\n                    </div>\n                )}\n                {isLoading && (\n                    <div className=\"loading\">\n                        <img src={Loading} className=\"\" alt=\"\" />\n                    </div>\n                )}\n            </section>\n        </section>\n    );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}